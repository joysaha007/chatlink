{"ast":null,"code":"var _jsxFileName = \"E:\\\\React\\\\Intern Project\\\\chatlink\\\\src\\\\components\\\\trendCard\\\\TrendCard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './TrendCard.css';\nimport { getAllUser } from '../api/UserRequest';\nimport { getTimelinePosts } from '../api/PostRequest';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TrendCard = () => {\n  _s();\n  const [trends, setTrends] = useState([]);\n  useEffect(() => {\n    const fetchTrends = async () => {\n      try {\n        // Fetch all users\n        const userResponse = await getAllUser();\n        const userList = userResponse.data;\n\n        // Fetch posts for all users\n        const postPromises = userList.map(user => getTimelinePosts(user._id));\n        const postResponses = await Promise.all(postPromises);\n\n        // Combine and process posts\n        const posts = postResponses.flatMap(response => response.data);\n\n        // Extract hashtags from post descriptions\n        const hashtagCounts = {};\n        posts.forEach(post => {\n          var _post$desc;\n          const hashtags = ((_post$desc = post.desc) === null || _post$desc === void 0 ? void 0 : _post$desc.match(/#[\\w]+/g)) || [];\n          hashtags.forEach(hashtag => {\n            hashtagCounts[hashtag] = (hashtagCounts[hashtag] || 0) + 1;\n          });\n        });\n\n        // Convert to array and sort by frequency\n        const sortedTrends = Object.entries(hashtagCounts).map(([name, count]) => ({\n          name,\n          shares: count\n        })).sort((a, b) => b.shares - a.shares);\n        setTrends(sortedTrends);\n      } catch (error) {\n        console.error('Error fetching trends:', error);\n      }\n    };\n    fetchTrends();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"TrendCard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Trends for you\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), trends.map((trend, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"trend\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: trend.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [trend.shares, \" shares\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(TrendCard, \"kLUnhehmoevJwfCWQUk2udGvkuc=\");\n_c = TrendCard;\nexport default TrendCard;\nvar _c;\n$RefreshReg$(_c, \"TrendCard\");","map":{"version":3,"names":["React","useState","useEffect","getAllUser","getTimelinePosts","jsxDEV","_jsxDEV","TrendCard","_s","trends","setTrends","fetchTrends","userResponse","userList","data","postPromises","map","user","_id","postResponses","Promise","all","posts","flatMap","response","hashtagCounts","forEach","post","_post$desc","hashtags","desc","match","hashtag","sortedTrends","Object","entries","name","count","shares","sort","a","b","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","trend","index","_c","$RefreshReg$"],"sources":["E:/React/Intern Project/chatlink/src/components/trendCard/TrendCard.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './TrendCard.css';\r\n\r\nimport { getAllUser } from '../api/UserRequest';\r\nimport { getTimelinePosts } from '../api/PostRequest';\r\n\r\nconst TrendCard = () => {\r\n  const [trends, setTrends] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchTrends = async () => {\r\n      try {\r\n        // Fetch all users\r\n        const userResponse = await getAllUser();\r\n        const userList = userResponse.data;\r\n\r\n        // Fetch posts for all users\r\n        const postPromises = userList.map((user) => getTimelinePosts(user._id));\r\n        const postResponses = await Promise.all(postPromises);\r\n\r\n        // Combine and process posts\r\n        const posts = postResponses.flatMap((response) => response.data);\r\n\r\n        // Extract hashtags from post descriptions\r\n        const hashtagCounts = {};\r\n        posts.forEach((post) => {\r\n          const hashtags = post.desc?.match(/#[\\w]+/g) || [];\r\n          hashtags.forEach((hashtag) => {\r\n            hashtagCounts[hashtag] = (hashtagCounts[hashtag] || 0) + 1;\r\n          });\r\n        });\r\n\r\n        // Convert to array and sort by frequency\r\n        const sortedTrends = Object.entries(hashtagCounts)\r\n          .map(([name, count]) => ({ name, shares: count }))\r\n          .sort((a, b) => b.shares - a.shares);\r\n\r\n        setTrends(sortedTrends);\r\n      } catch (error) {\r\n        console.error('Error fetching trends:', error);\r\n      }\r\n    };\r\n\r\n    fetchTrends();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"TrendCard\">\r\n      <h3>Trends for you</h3>\r\n      {trends.map((trend, index) => (\r\n        <div className=\"trend\" key={index}>\r\n          <span>{trend.name}</span>\r\n          <span>{trend.shares} shares</span>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TrendCard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}