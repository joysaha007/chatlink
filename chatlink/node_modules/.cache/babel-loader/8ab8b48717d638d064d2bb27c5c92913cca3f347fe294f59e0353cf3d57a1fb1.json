{"ast":null,"code":"var _jsxFileName = \"E:\\\\React\\\\Intern Project\\\\chatlink\\\\src\\\\components\\\\posts\\\\Posts.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { getTimelinePosts } from \"../actions/postAction\";\nimport Post from \"../post/Post\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport \"./Posts.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Posts = () => {\n  _s();\n  const dispatch = useDispatch();\n  const {\n    user\n  } = useSelector(state => state.authReducer.authData);\n  const {\n    posts = [],\n    loading\n  } = useSelector(state => state.postReducer);\n  const [updatedPosts, setUpdatedPosts] = useState(posts);\n  useEffect(() => {\n    if (user && user._id) {\n      dispatch(getTimelinePosts(user._id));\n    }\n  }, [dispatch, user]);\n\n  // Update posts when a post's like status changes\n  const handleLikeToggle = (postId, newLikedStatus) => {\n    setUpdatedPosts(prevPosts => prevPosts.map(post => post._id === postId ? {\n      ...post,\n      likes: newLikedStatus ? [...post.likes, user._id] : post.likes.filter(id => id !== user._id)\n    } : post));\n  };\n  useEffect(() => {\n    setUpdatedPosts(posts); // Sync updatedPosts with the Redux store posts\n  }, [posts]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Posts\",\n    children: loading ? \"Fetching posts....\" : updatedPosts && updatedPosts.length > 0 ? updatedPosts.map(post => /*#__PURE__*/_jsxDEV(Post, {\n      data: post,\n      onLikeToggle: handleLikeToggle // Passing the function to the Post component\n    }, post._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 11\n    }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No Posts Available\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(Posts, \"HggUQp/889OF7J/jjJ25NKR30hI=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c = Posts;\nexport default Posts;\nvar _c;\n$RefreshReg$(_c, \"Posts\");","map":{"version":3,"names":["React","useEffect","useState","getTimelinePosts","Post","useSelector","useDispatch","jsxDEV","_jsxDEV","Posts","_s","dispatch","user","state","authReducer","authData","posts","loading","postReducer","updatedPosts","setUpdatedPosts","_id","handleLikeToggle","postId","newLikedStatus","prevPosts","map","post","likes","filter","id","className","children","length","data","onLikeToggle","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/React/Intern Project/chatlink/src/components/posts/Posts.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { getTimelinePosts } from \"../actions/postAction\";\r\nimport Post from \"../post/Post\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport \"./Posts.css\";\r\n\r\nconst Posts = () => {\r\n  const dispatch = useDispatch();\r\n  const { user } = useSelector((state) => state.authReducer.authData);\r\n  const { posts = [], loading } = useSelector((state) => state.postReducer);\r\n\r\n  const [updatedPosts, setUpdatedPosts] = useState(posts);\r\n\r\n  useEffect(() => {\r\n    if (user && user._id) {\r\n      dispatch(getTimelinePosts(user._id));\r\n    }\r\n  }, [dispatch, user]);\r\n\r\n  // Update posts when a post's like status changes\r\n  const handleLikeToggle = (postId, newLikedStatus) => {\r\n    setUpdatedPosts((prevPosts) =>\r\n      prevPosts.map((post) =>\r\n        post._id === postId\r\n          ? {\r\n              ...post,\r\n              likes: newLikedStatus\r\n                ? [...post.likes, user._id]\r\n                : post.likes.filter((id) => id !== user._id),\r\n            }\r\n          : post\r\n      )\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    setUpdatedPosts(posts); // Sync updatedPosts with the Redux store posts\r\n  }, [posts]);\r\n\r\n  return (\r\n    <div className=\"Posts\">\r\n      {loading ? (\r\n        \"Fetching posts....\"\r\n      ) : updatedPosts && updatedPosts.length > 0 ? (\r\n        updatedPosts.map((post) => (\r\n          <Post\r\n            data={post}\r\n            key={post._id}\r\n            onLikeToggle={handleLikeToggle} // Passing the function to the Post component\r\n          />\r\n        ))\r\n      ) : (\r\n        <p>No Posts Available</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Posts;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,gBAAgB,QAAQ,uBAAuB;AACxD,OAAOC,IAAI,MAAM,cAAc;AAC/B,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,OAAO,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErB,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM;IAAEM;EAAK,CAAC,GAAGP,WAAW,CAAEQ,KAAK,IAAKA,KAAK,CAACC,WAAW,CAACC,QAAQ,CAAC;EACnE,MAAM;IAAEC,KAAK,GAAG,EAAE;IAAEC;EAAQ,CAAC,GAAGZ,WAAW,CAAEQ,KAAK,IAAKA,KAAK,CAACK,WAAW,CAAC;EAEzE,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGlB,QAAQ,CAACc,KAAK,CAAC;EAEvDf,SAAS,CAAC,MAAM;IACd,IAAIW,IAAI,IAAIA,IAAI,CAACS,GAAG,EAAE;MACpBV,QAAQ,CAACR,gBAAgB,CAACS,IAAI,CAACS,GAAG,CAAC,CAAC;IACtC;EACF,CAAC,EAAE,CAACV,QAAQ,EAAEC,IAAI,CAAC,CAAC;;EAEpB;EACA,MAAMU,gBAAgB,GAAGA,CAACC,MAAM,EAAEC,cAAc,KAAK;IACnDJ,eAAe,CAAEK,SAAS,IACxBA,SAAS,CAACC,GAAG,CAAEC,IAAI,IACjBA,IAAI,CAACN,GAAG,KAAKE,MAAM,GACf;MACE,GAAGI,IAAI;MACPC,KAAK,EAAEJ,cAAc,GACjB,CAAC,GAAGG,IAAI,CAACC,KAAK,EAAEhB,IAAI,CAACS,GAAG,CAAC,GACzBM,IAAI,CAACC,KAAK,CAACC,MAAM,CAAEC,EAAE,IAAKA,EAAE,KAAKlB,IAAI,CAACS,GAAG;IAC/C,CAAC,GACDM,IACN,CACF,CAAC;EACH,CAAC;EAED1B,SAAS,CAAC,MAAM;IACdmB,eAAe,CAACJ,KAAK,CAAC,CAAC,CAAC;EAC1B,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EAEX,oBACER,OAAA;IAAKuB,SAAS,EAAC,OAAO;IAAAC,QAAA,EACnBf,OAAO,GACN,oBAAoB,GAClBE,YAAY,IAAIA,YAAY,CAACc,MAAM,GAAG,CAAC,GACzCd,YAAY,CAACO,GAAG,CAAEC,IAAI,iBACpBnB,OAAA,CAACJ,IAAI;MACH8B,IAAI,EAAEP,IAAK;MAEXQ,YAAY,EAAEb,gBAAiB,CAAC;IAAA,GAD3BK,IAAI,CAACN,GAAG;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEd,CACF,CAAC,gBAEF/B,OAAA;MAAAwB,QAAA,EAAG;IAAkB;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG;EACzB;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAC7B,EAAA,CAlDID,KAAK;EAAA,QACQH,WAAW,EACXD,WAAW,EACIA,WAAW;AAAA;AAAAmC,EAAA,GAHvC/B,KAAK;AAoDX,eAAeA,KAAK;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}