{"ast":null,"code":"var _jsxFileName = \"E:\\\\React\\\\Intern Project\\\\chatlink\\\\src\\\\components\\\\admin\\\\Notification.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getNotifications, createNotification, updateNotification, markNotificationAsRead, deleteNotification, getUnreadNotificationCount } from \"../actions/NotificationAction\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Notification = () => {\n  _s();\n  const dispatch = useDispatch();\n  const {\n    user\n  } = useSelector(state => state.authReducer.authData);\n  const adminUserId = \"6757eeeabacab91a5683007c\"; // Fixed admin user ID\n  const currentUserId = user._id;\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [notificationType, setNotificationType] = useState(\"\");\n  const [updatedMessage, setUpdatedMessage] = useState(\"\");\n  const notifications = useSelector(state => state.notificationReducer.notifications);\n  const unreadCount = useSelector(state => state.notificationReducer.unreadCount);\n  useEffect(() => {\n    // Fetch notifications for the current user or admin\n    dispatch(getNotifications(currentUserId));\n    dispatch(getUnreadNotificationCount(currentUserId));\n  }, [dispatch, currentUserId]);\n  const handleCreateNotification = () => {\n    if (newMessage && notificationType) {\n      dispatch(createNotification(currentUserId, newMessage, notificationType));\n      setNewMessage(\"\");\n      setNotificationType(\"\");\n    } else {\n      console.error(\"Message and type are required to create a notification\");\n    }\n  };\n  const handleUpdateNotification = notificationId => {\n    if (updatedMessage) {\n      dispatch(updateNotification(notificationId, updatedMessage));\n      setUpdatedMessage(\"\");\n    } else {\n      console.error(\"Updated message is required\");\n    }\n  };\n  const handleMarkAsRead = notificationId => {\n    dispatch(markNotificationAsRead(notificationId));\n  };\n  const handleDeleteNotification = notificationId => {\n    dispatch(deleteNotification(notificationId));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"notification-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Notifications\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"unread-count\",\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Unread Notifications: \", unreadCount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), currentUserId === adminUserId && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"create-notification-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter notification message\",\n        value: newMessage,\n        onChange: e => setNewMessage(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: notificationType,\n        onChange: e => setNotificationType(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select Type\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"info\",\n          children: \"Info\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"warning\",\n          children: \"Warning\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"error\",\n          children: \"Error\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCreateNotification,\n        children: \"Create Notification\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notification-list\",\n      children: notifications && notifications.length > 0 ? notifications.map(notification => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"notification-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: notification.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Type: \", notification.type]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Status: \", notification.read ? \"Read\" : \"Unread\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 15\n        }, this), currentUserId === adminUserId && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"admin-actions\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleUpdateNotification(notification._id),\n            children: \"Update\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleDeleteNotification(notification._id),\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 17\n        }, this), currentUserId !== adminUserId && !notification.read && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleMarkAsRead(notification._id),\n          children: \"Mark as Read\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 17\n        }, this)]\n      }, notification._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No notifications available.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s(Notification, \"w7rLdC3Xi98By/Enm5m2b5E9uJg=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n});\n_c = Notification;\nexport default Notification;\nvar _c;\n$RefreshReg$(_c, \"Notification\");","map":{"version":3,"names":["React","useEffect","useState","useDispatch","useSelector","getNotifications","createNotification","updateNotification","markNotificationAsRead","deleteNotification","getUnreadNotificationCount","jsxDEV","_jsxDEV","Notification","_s","dispatch","user","state","authReducer","authData","adminUserId","currentUserId","_id","newMessage","setNewMessage","notificationType","setNotificationType","updatedMessage","setUpdatedMessage","notifications","notificationReducer","unreadCount","handleCreateNotification","console","error","handleUpdateNotification","notificationId","handleMarkAsRead","handleDeleteNotification","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","length","map","notification","message","read","_c","$RefreshReg$"],"sources":["E:/React/Intern Project/chatlink/src/components/admin/Notification.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getNotifications, createNotification, updateNotification, markNotificationAsRead, deleteNotification, getUnreadNotificationCount } from \"../actions/NotificationAction\";\r\n\r\nconst Notification = () => {\r\n  const dispatch = useDispatch();\r\n  const { user } = useSelector((state) => state.authReducer.authData);\r\n  const adminUserId = \"6757eeeabacab91a5683007c\"; // Fixed admin user ID\r\n  const currentUserId = user._id;\r\n\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  const [notificationType, setNotificationType] = useState(\"\");\r\n  const [updatedMessage, setUpdatedMessage] = useState(\"\");\r\n\r\n  const notifications = useSelector((state) => state.notificationReducer.notifications);\r\n  const unreadCount = useSelector((state) => state.notificationReducer.unreadCount);\r\n\r\n  useEffect(() => {\r\n    // Fetch notifications for the current user or admin\r\n    dispatch(getNotifications(currentUserId));\r\n    dispatch(getUnreadNotificationCount(currentUserId));\r\n  }, [dispatch, currentUserId]);\r\n\r\n  const handleCreateNotification = () => {\r\n    if (newMessage && notificationType) {\r\n      dispatch(createNotification(currentUserId, newMessage, notificationType));\r\n      setNewMessage(\"\");\r\n      setNotificationType(\"\");\r\n    } else {\r\n      console.error(\"Message and type are required to create a notification\");\r\n    }\r\n  };\r\n\r\n  const handleUpdateNotification = (notificationId) => {\r\n    if (updatedMessage) {\r\n      dispatch(updateNotification(notificationId, updatedMessage));\r\n      setUpdatedMessage(\"\");\r\n    } else {\r\n      console.error(\"Updated message is required\");\r\n    }\r\n  };\r\n\r\n  const handleMarkAsRead = (notificationId) => {\r\n    dispatch(markNotificationAsRead(notificationId));\r\n  };\r\n\r\n  const handleDeleteNotification = (notificationId) => {\r\n    dispatch(deleteNotification(notificationId));\r\n  };\r\n\r\n  return (\r\n    <div className=\"notification-container\">\r\n      <h2>Notifications</h2>\r\n\r\n      {/* Unread Notifications Count */}\r\n      <div className=\"unread-count\">\r\n        <h3>Unread Notifications: {unreadCount}</h3>\r\n      </div>\r\n\r\n      {/* Notification Creation Form (Admin or User) */}\r\n      {currentUserId === adminUserId && (\r\n        <div className=\"create-notification-form\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Enter notification message\"\r\n            value={newMessage}\r\n            onChange={(e) => setNewMessage(e.target.value)}\r\n          />\r\n          <select\r\n            value={notificationType}\r\n            onChange={(e) => setNotificationType(e.target.value)}\r\n          >\r\n            <option value=\"\">Select Type</option>\r\n            <option value=\"info\">Info</option>\r\n            <option value=\"warning\">Warning</option>\r\n            <option value=\"error\">Error</option>\r\n          </select>\r\n          <button onClick={handleCreateNotification}>Create Notification</button>\r\n        </div>\r\n      )}\r\n\r\n      {/* Display Notifications */}\r\n      <div className=\"notification-list\">\r\n        {notifications && notifications.length > 0 ? (\r\n          notifications.map((notification) => (\r\n            <div key={notification._id} className=\"notification-item\">\r\n              <p>{notification.message}</p>\r\n              <p>Type: {notification.type}</p>\r\n              <p>Status: {notification.read ? \"Read\" : \"Unread\"}</p>\r\n\r\n              {/* Admin Actions */}\r\n              {currentUserId === adminUserId && (\r\n                <div className=\"admin-actions\">\r\n                  <button onClick={() => handleUpdateNotification(notification._id)}>\r\n                    Update\r\n                  </button>\r\n                  <button onClick={() => handleDeleteNotification(notification._id)}>\r\n                    Delete\r\n                  </button>\r\n                </div>\r\n              )}\r\n\r\n              {/* Mark as Read (for user) */}\r\n              {currentUserId !== adminUserId && !notification.read && (\r\n                <button onClick={() => handleMarkAsRead(notification._id)}>\r\n                  Mark as Read\r\n                </button>\r\n              )}\r\n            </div>\r\n          ))\r\n        ) : (\r\n          <p>No notifications available.</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Notification;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}