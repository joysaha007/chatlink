{"ast":null,"code":"var _jsxFileName = \"E:\\\\React\\\\Intern Project\\\\chatlink\\\\src\\\\components\\\\trendCard\\\\TrendCard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './TrendCard.css';\nimport { getAllUser } from '../api/UserRequest';\nimport { getTimelinePosts } from '../api/PostRequest';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TrendCard = () => {\n  _s();\n  const [trends, setTrends] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchTrends = async () => {\n      try {\n        // Fetch all users\n        const userResponse = await getAllUser();\n        console.log('Users:', userResponse.data);\n        const userList = userResponse.data;\n\n        // Fetch posts for all users\n        const postPromises = userList.map(user => getTimelinePosts(user._id));\n        const postResponses = await Promise.all(postPromises);\n\n        // Combine and process posts\n        const posts = postResponses.flatMap(response => response.data);\n        console.log('Posts:', posts);\n\n        // Filter duplicate posts by their unique `_id`\n        const uniquePosts = Array.from(new Map(posts.map(post => [post._id, post])).values());\n\n        // Extract hashtags from post descriptions\n        const hashtagCounts = {};\n        uniquePosts.forEach(post => {\n          var _post$desc;\n          const hashtags = ((_post$desc = post.desc) === null || _post$desc === void 0 ? void 0 : _post$desc.match(/#[\\w]+/g)) || [];\n          hashtags.forEach(hashtag => {\n            hashtagCounts[hashtag] = (hashtagCounts[hashtag] || 0) + 1;\n          });\n        });\n\n        // Convert to array and sort by frequency\n        const sortedTrends = Object.entries(hashtagCounts).map(([name, count]) => ({\n          name,\n          shares: count\n        })).sort((a, b) => b.shares - a.shares);\n        console.log('Trends:', sortedTrends);\n        setTrends(sortedTrends);\n      } catch (error) {\n        console.error('Error fetching trends:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchTrends();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"TrendCard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Trends for you\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading trends...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this) : trends.length > 0 ? trends.map((trend, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"trend\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: trend.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [trend.shares, \" Likes\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No trends available\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(TrendCard, \"wYkjwz8MCAWqzAiosmqi6tph1e4=\");\n_c = TrendCard;\nexport default TrendCard;\nvar _c;\n$RefreshReg$(_c, \"TrendCard\");","map":{"version":3,"names":["React","useState","useEffect","getAllUser","getTimelinePosts","jsxDEV","_jsxDEV","TrendCard","_s","trends","setTrends","loading","setLoading","fetchTrends","userResponse","console","log","data","userList","postPromises","map","user","_id","postResponses","Promise","all","posts","flatMap","response","uniquePosts","Array","from","Map","post","values","hashtagCounts","forEach","_post$desc","hashtags","desc","match","hashtag","sortedTrends","Object","entries","name","count","shares","sort","a","b","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","trend","index","_c","$RefreshReg$"],"sources":["E:/React/Intern Project/chatlink/src/components/trendCard/TrendCard.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './TrendCard.css';\r\n\r\nimport { getAllUser } from '../api/UserRequest';\r\nimport { getTimelinePosts } from '../api/PostRequest';\r\n\r\nconst TrendCard = () => {\r\n  const [trends, setTrends] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchTrends = async () => {\r\n      try {\r\n        // Fetch all users\r\n        const userResponse = await getAllUser();\r\n        console.log('Users:', userResponse.data);\r\n        const userList = userResponse.data;\r\n\r\n        // Fetch posts for all users\r\n        const postPromises = userList.map((user) => getTimelinePosts(user._id));\r\n        const postResponses = await Promise.all(postPromises);\r\n\r\n        // Combine and process posts\r\n        const posts = postResponses.flatMap((response) => response.data);\r\n        console.log('Posts:', posts);\r\n\r\n        // Filter duplicate posts by their unique `_id`\r\n        const uniquePosts = Array.from(\r\n          new Map(posts.map((post) => [post._id, post])).values()\r\n        );\r\n\r\n        // Extract hashtags from post descriptions\r\n        const hashtagCounts = {};\r\n        uniquePosts.forEach((post) => {\r\n          const hashtags = post.desc?.match(/#[\\w]+/g) || [];\r\n          hashtags.forEach((hashtag) => {\r\n            hashtagCounts[hashtag] = (hashtagCounts[hashtag] || 0) + 1;\r\n          });\r\n        });\r\n\r\n        // Convert to array and sort by frequency\r\n        const sortedTrends = Object.entries(hashtagCounts)\r\n          .map(([name, count]) => ({ name, shares: count }))\r\n          .sort((a, b) => b.shares - a.shares);\r\n\r\n        console.log('Trends:', sortedTrends);\r\n        setTrends(sortedTrends);\r\n      } catch (error) {\r\n        console.error('Error fetching trends:', error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchTrends();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"TrendCard\">\r\n      <h3>Trends for you</h3>\r\n      {loading ? (\r\n        <div>Loading trends...</div>\r\n      ) : trends.length > 0 ? (\r\n        trends.map((trend, index) => (\r\n          <div className=\"trend\" key={index}>\r\n            <span>{trend.name}</span>\r\n            <span>{trend.shares} Likes</span>\r\n          </div>\r\n        ))\r\n      ) : (\r\n        <div>No trends available</div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TrendCard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}