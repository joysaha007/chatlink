{"ast":null,"code":"var _jsxFileName = \"E:\\\\React\\\\Intern Project\\\\chatlink\\\\src\\\\components\\\\admin\\\\Notification.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getNotifications, createNotification, markNotificationAsRead, deleteNotification, updateNotification } from \"../actions/NotificationAction.js\"; // Import your action creators\nimport { Modal, Button, Form } from \"react-bootstrap\"; // Import Bootstrap modal components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Notification = () => {\n  _s();\n  const dispatch = useDispatch();\n  const {\n    notifications,\n    loading,\n    error\n  } = useSelector(state => state.notifications);\n\n  // State to manage modal visibility and notification data\n  const [showModal, setShowModal] = useState(false);\n  const [notificationData, setNotificationData] = useState({\n    message: \"\",\n    id: null\n  });\n\n  // Fetch notifications on component mount\n  useEffect(() => {\n    dispatch(getNotifications());\n  }, [dispatch]);\n\n  // Handler to create a new notification\n  const handleCreateNotification = newNotification => {\n    dispatch(createNotification(newNotification));\n    setShowModal(false); // Close modal after creating notification\n  };\n\n  // Handler to update an existing notification\n  const handleUpdateNotification = updatedNotification => {\n    dispatch(updateNotification(updatedNotification));\n    setShowModal(false); // Close modal after updating notification\n  };\n\n  // Handler to mark a notification as read\n  const handleMarkAsRead = id => {\n    dispatch(markNotificationAsRead(id));\n  };\n\n  // Handler to delete a notification\n  const handleDeleteNotification = id => {\n    dispatch(deleteNotification(id));\n  };\n\n  // Open modal for creating a new notification\n  const openCreateModal = () => {\n    setNotificationData({\n      message: \"\",\n      id: null\n    }); // Reset form data for new notification\n    setShowModal(true);\n  };\n\n  // Open modal for editing an existing notification\n  const openEditModal = notification => {\n    setNotificationData({\n      message: notification.message,\n      id: notification._id\n    });\n    setShowModal(true);\n  };\n\n  // Handle form submission\n  const handleFormSubmit = e => {\n    e.preventDefault();\n    if (notificationData.id) {\n      handleUpdateNotification(notificationData); // Update existing notification\n    } else {\n      handleCreateNotification(notificationData); // Create new notification\n    }\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Error fetching notifications\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"notification-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Notifications\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), notifications.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No notifications available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this) : notifications.map(notification => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notification-item\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: notification.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: notification.read ? \"Read\" : \"Unread\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 16\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleMarkAsRead(notification._id),\n        children: \"Mark as Read\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleDeleteNotification(notification._id),\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => openEditModal(notification),\n        children: \"Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }, this)]\n    }, notification._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: openCreateModal,\n      className: \"create-notification-button\",\n      children: \"Create Notification\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      show: showModal,\n      onHide: () => setShowModal(false),\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        closeButton: true,\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: notificationData.id ? \"Edit Notification\" : \"Create Notification\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          onSubmit: handleFormSubmit,\n          children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"notificationMessage\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Message\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              placeholder: \"Enter notification message\",\n              value: notificationData.message,\n              onChange: e => setNotificationData({\n                ...notificationData,\n                message: e.target.value\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"primary\",\n            type: \"submit\",\n            children: notificationData.id ? \"Update\" : \"Create\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(Notification, \"y1S6eu7IC+FnLM3FXjlcySu16ms=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = Notification;\nexport default Notification;\nvar _c;\n$RefreshReg$(_c, \"Notification\");","map":{"version":3,"names":["React","useEffect","useState","useDispatch","useSelector","getNotifications","createNotification","markNotificationAsRead","deleteNotification","updateNotification","Modal","Button","Form","jsxDEV","_jsxDEV","Notification","_s","dispatch","notifications","loading","error","state","showModal","setShowModal","notificationData","setNotificationData","message","id","handleCreateNotification","newNotification","handleUpdateNotification","updatedNotification","handleMarkAsRead","handleDeleteNotification","openCreateModal","openEditModal","notification","_id","handleFormSubmit","e","preventDefault","children","fileName","_jsxFileName","lineNumber","columnNumber","className","length","map","read","onClick","show","onHide","Header","closeButton","Title","Body","onSubmit","Group","controlId","Label","Control","type","placeholder","value","onChange","target","variant","_c","$RefreshReg$"],"sources":["E:/React/Intern Project/chatlink/src/components/admin/Notification.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getNotifications, createNotification, markNotificationAsRead, deleteNotification, updateNotification } from \"../actions/NotificationAction.js\"; // Import your action creators\r\nimport { Modal, Button, Form } from \"react-bootstrap\"; // Import Bootstrap modal components\r\n\r\nconst Notification = () => {\r\n  const dispatch = useDispatch();\r\n  const { notifications, loading, error } = useSelector((state) => state.notifications);\r\n\r\n  // State to manage modal visibility and notification data\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [notificationData, setNotificationData] = useState({ message: \"\", id: null });\r\n\r\n  // Fetch notifications on component mount\r\n  useEffect(() => {\r\n    dispatch(getNotifications());\r\n  }, [dispatch]);\r\n\r\n  // Handler to create a new notification\r\n  const handleCreateNotification = (newNotification) => {\r\n    dispatch(createNotification(newNotification));\r\n    setShowModal(false); // Close modal after creating notification\r\n  };\r\n\r\n  // Handler to update an existing notification\r\n  const handleUpdateNotification = (updatedNotification) => {\r\n    dispatch(updateNotification(updatedNotification));\r\n    setShowModal(false); // Close modal after updating notification\r\n  };\r\n\r\n  // Handler to mark a notification as read\r\n  const handleMarkAsRead = (id) => {\r\n    dispatch(markNotificationAsRead(id));\r\n  };\r\n\r\n  // Handler to delete a notification\r\n  const handleDeleteNotification = (id) => {\r\n    dispatch(deleteNotification(id));\r\n  };\r\n\r\n  // Open modal for creating a new notification\r\n  const openCreateModal = () => {\r\n    setNotificationData({ message: \"\", id: null }); // Reset form data for new notification\r\n    setShowModal(true);\r\n  };\r\n\r\n  // Open modal for editing an existing notification\r\n  const openEditModal = (notification) => {\r\n    setNotificationData({ message: notification.message, id: notification._id });\r\n    setShowModal(true);\r\n  };\r\n\r\n  // Handle form submission\r\n  const handleFormSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (notificationData.id) {\r\n      handleUpdateNotification(notificationData); // Update existing notification\r\n    } else {\r\n      handleCreateNotification(notificationData); // Create new notification\r\n    }\r\n  };\r\n\r\n  if (loading) return <div>Loading...</div>;\r\n  if (error) return <div>Error fetching notifications</div>;\r\n\r\n  return (\r\n    <div className=\"notification-container\">\r\n      <h2>Notifications</h2>\r\n\r\n      {/* Displaying notifications */}\r\n      {notifications.length === 0 ? (\r\n        <p>No notifications available.</p>\r\n      ) : (\r\n        notifications.map((notification) => (\r\n          <div key={notification._id} className=\"notification-item\">\r\n            <p>{notification.message}</p>\r\n            <p><strong>{notification.read ? \"Read\" : \"Unread\"}</strong></p>\r\n            <button onClick={() => handleMarkAsRead(notification._id)}>\r\n              Mark as Read\r\n            </button>\r\n            <button onClick={() => handleDeleteNotification(notification._id)}>\r\n              Delete\r\n            </button>\r\n            <button onClick={() => openEditModal(notification)}>\r\n              Edit\r\n            </button>\r\n          </div>\r\n        ))\r\n      )}\r\n\r\n      {/* Button to create a new notification */}\r\n      <button onClick={openCreateModal} className=\"create-notification-button\">\r\n        Create Notification\r\n      </button>\r\n\r\n      {/* Modal for creating/updating notification */}\r\n      <Modal show={showModal} onHide={() => setShowModal(false)}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>{notificationData.id ? \"Edit Notification\" : \"Create Notification\"}</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form onSubmit={handleFormSubmit}>\r\n            <Form.Group controlId=\"notificationMessage\">\r\n              <Form.Label>Message</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Enter notification message\"\r\n                value={notificationData.message}\r\n                onChange={(e) => setNotificationData({ ...notificationData, message: e.target.value })}\r\n              />\r\n            </Form.Group>\r\n            <Button variant=\"primary\" type=\"submit\">\r\n              {notificationData.id ? \"Update\" : \"Create\"}\r\n            </Button>\r\n          </Form>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Notification;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}