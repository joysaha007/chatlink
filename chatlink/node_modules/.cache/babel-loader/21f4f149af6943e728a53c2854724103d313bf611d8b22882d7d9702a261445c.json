{"ast":null,"code":"import * as NotificationApi from \"../api/NotificationRequest\";\n\n// Action to get notifications for a user\nexport const getNotifications = userId => async dispatch => {\n  dispatch({\n    type: \"FETCH_NOTIFICATIONS_START\"\n  });\n  try {\n    const {\n      data\n    } = await NotificationApi.getNotifications(userId);\n    dispatch({\n      type: \"FETCH_NOTIFICATIONS_SUCCESS\",\n      data: data\n    });\n  } catch (error) {\n    console.error(\"Error fetching notifications:\", error);\n    dispatch({\n      type: \"FETCH_NOTIFICATIONS_FAIL\"\n    });\n  }\n};\n\n// Action to create a new notification\nexport const createNotification = (userId, message, type) => async dispatch => {\n  dispatch({\n    type: \"CREATE_NOTIFICATION_START\"\n  });\n  try {\n    const {\n      data\n    } = await NotificationApi.createNotification(userId, message, type);\n    dispatch({\n      type: \"CREATE_NOTIFICATION_SUCCESS\",\n      data: data\n    });\n  } catch (error) {\n    console.error(\"Error creating notification:\", error);\n    dispatch({\n      type: \"CREATE_NOTIFICATION_FAIL\"\n    });\n  }\n};\n\n// Action to mark a notification as read\nexport const markNotificationAsRead = notificationId => async dispatch => {\n  dispatch({\n    type: \"MARK_NOTIFICATION_READ_START\"\n  });\n  try {\n    const {\n      data\n    } = await NotificationApi.markNotificationAsRead(notificationId);\n    dispatch({\n      type: \"MARK_NOTIFICATION_READ_SUCCESS\",\n      data: data\n    });\n  } catch (error) {\n    console.error(\"Error marking notification as read:\", error);\n    dispatch({\n      type: \"MARK_NOTIFICATION_READ_FAIL\"\n    });\n  }\n};\n\n// Action to delete a notification\nexport const deleteNotification = notificationId => async dispatch => {\n  dispatch({\n    type: \"DELETE_NOTIFICATION_START\"\n  });\n  try {\n    const {\n      data\n    } = await NotificationApi.deleteNotification(notificationId);\n    dispatch({\n      type: \"DELETE_NOTIFICATION_SUCCESS\",\n      data: data\n    });\n  } catch (error) {\n    console.error(\"Error deleting notification:\", error);\n    dispatch({\n      type: \"DELETE_NOTIFICATION_FAIL\"\n    });\n  }\n};\n\n// Action to get unread notification count\nexport const getUnreadNotificationCount = userId => async dispatch => {\n  dispatch({\n    type: \"FETCH_UNREAD_NOTIFICATION_COUNT_START\"\n  });\n  try {\n    const {\n      data\n    } = await NotificationApi.getUnreadNotificationCount(userId);\n    dispatch({\n      type: \"FETCH_UNREAD_NOTIFICATION_COUNT_SUCCESS\",\n      data: data\n    });\n  } catch (error) {\n    console.error(\"Error fetching unread notification count:\", error);\n    dispatch({\n      type: \"FETCH_UNREAD_NOTIFICATION_COUNT_FAIL\"\n    });\n  }\n};","map":{"version":3,"names":["NotificationApi","getNotifications","userId","dispatch","type","data","error","console","createNotification","message","markNotificationAsRead","notificationId","deleteNotification","getUnreadNotificationCount"],"sources":["E:/React/Intern Project/chatlink/src/components/actions/NotificationAction.js"],"sourcesContent":["import * as NotificationApi from \"../api/NotificationRequest\";\r\n\r\n// Action to get notifications for a user\r\nexport const getNotifications = (userId) => async (dispatch) => {\r\n  dispatch({ type: \"FETCH_NOTIFICATIONS_START\" });\r\n  try {\r\n    const { data } = await NotificationApi.getNotifications(userId);\r\n    dispatch({ type: \"FETCH_NOTIFICATIONS_SUCCESS\", data: data });\r\n  } catch (error) {\r\n    console.error(\"Error fetching notifications:\", error);\r\n    dispatch({ type: \"FETCH_NOTIFICATIONS_FAIL\" });\r\n  }\r\n};\r\n\r\n// Action to create a new notification\r\nexport const createNotification = (userId, message, type) => async (dispatch) => {\r\n  dispatch({ type: \"CREATE_NOTIFICATION_START\" });\r\n  try {\r\n    const { data } = await NotificationApi.createNotification(userId, message, type);\r\n    dispatch({ type: \"CREATE_NOTIFICATION_SUCCESS\", data: data });\r\n  } catch (error) {\r\n    console.error(\"Error creating notification:\", error);\r\n    dispatch({ type: \"CREATE_NOTIFICATION_FAIL\" });\r\n  }\r\n};\r\n\r\n// Action to mark a notification as read\r\nexport const markNotificationAsRead = (notificationId) => async (dispatch) => {\r\n  dispatch({ type: \"MARK_NOTIFICATION_READ_START\" });\r\n  try {\r\n    const { data } = await NotificationApi.markNotificationAsRead(notificationId);\r\n    dispatch({ type: \"MARK_NOTIFICATION_READ_SUCCESS\", data: data });\r\n  } catch (error) {\r\n    console.error(\"Error marking notification as read:\", error);\r\n    dispatch({ type: \"MARK_NOTIFICATION_READ_FAIL\" });\r\n  }\r\n};\r\n\r\n// Action to delete a notification\r\nexport const deleteNotification = (notificationId) => async (dispatch) => {\r\n  dispatch({ type: \"DELETE_NOTIFICATION_START\" });\r\n  try {\r\n    const { data } = await NotificationApi.deleteNotification(notificationId);\r\n    dispatch({ type: \"DELETE_NOTIFICATION_SUCCESS\", data: data });\r\n  } catch (error) {\r\n    console.error(\"Error deleting notification:\", error);\r\n    dispatch({ type: \"DELETE_NOTIFICATION_FAIL\" });\r\n  }\r\n};\r\n\r\n// Action to get unread notification count\r\nexport const getUnreadNotificationCount = (userId) => async (dispatch) => {\r\n  dispatch({ type: \"FETCH_UNREAD_NOTIFICATION_COUNT_START\" });\r\n  try {\r\n    const { data } = await NotificationApi.getUnreadNotificationCount(userId);\r\n    dispatch({ type: \"FETCH_UNREAD_NOTIFICATION_COUNT_SUCCESS\", data: data });\r\n  } catch (error) {\r\n    console.error(\"Error fetching unread notification count:\", error);\r\n    dispatch({ type: \"FETCH_UNREAD_NOTIFICATION_COUNT_FAIL\" });\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}