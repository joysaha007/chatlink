{"ast":null,"code":"const initialState = {\n  notifications: [],\n  // Array to store notifications\n  loading: false,\n  // Loading state for fetching notifications\n  error: false,\n  // Error state\n  creating: false,\n  // State for creating notifications\n  user: null\n};\nconst notificationReducer = (state = initialState, action) => {\n  switch (action.type) {\n    // Actions for creating a notification\n    case \"CREATE_NOTIFICATION_START\":\n      return {\n        ...state,\n        creating: true,\n        error: false\n      };\n    case \"CREATE_NOTIFICATION_SUCCESS\":\n      return {\n        ...state,\n        notifications: [action.data, ...state.notifications],\n        // Add new notification to the list\n        creating: false,\n        error: false\n      };\n    case \"CREATE_NOTIFICATION_FAIL\":\n      return {\n        ...state,\n        creating: false,\n        error: true\n      };\n\n    // Actions for retrieving notifications\n    case \"GET_NOTIFICATIONS_START\":\n      return {\n        ...state,\n        loading: true,\n        error: false\n      };\n    case \"GET_NOTIFICATIONS_SUCCESS\":\n      return {\n        ...state,\n        notifications: action.data || [],\n        // Ensure notifications defaults to an empty array if action.data is undefined\n        loading: false,\n        error: false\n      };\n    case \"GET_NOTIFICATIONS_FAIL\":\n      return {\n        ...state,\n        loading: false,\n        error: true\n      };\n\n    // Actions for marking a notification as read\n    case \"MARK_NOTIFICATION_AS_READ\":\n      return {\n        ...state,\n        notifications: state.notifications.map(notification => notification._id === action.id ? {\n          ...notification,\n          read: true\n        } // Mark notification as read\n        : notification)\n      };\n\n    // Actions for deleting a notification\n    case \"DELETE_NOTIFICATION\":\n      return {\n        ...state,\n        notifications: state.notifications.filter(notification => notification._id !== action.id // Remove notification by id\n        )\n      };\n    default:\n      return state;\n  }\n};\nexport default notificationReducer;","map":{"version":3,"names":["initialState","notifications","loading","error","creating","user","notificationReducer","state","action","type","data","map","notification","_id","id","read","filter"],"sources":["E:/React/Intern Project/chatlink/src/reducers/NotificationReducer.js"],"sourcesContent":["const initialState = {\r\n    notifications: [], // Array to store notifications\r\n    loading: false, // Loading state for fetching notifications\r\n    error: false, // Error state\r\n    creating: false, // State for creating notifications\r\n    user:null\r\n  };\r\n\r\n  \r\n  const notificationReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n      // Actions for creating a notification\r\n      case \"CREATE_NOTIFICATION_START\":\r\n        return { ...state, creating: true, error: false };\r\n      case \"CREATE_NOTIFICATION_SUCCESS\":\r\n        return {\r\n          ...state,\r\n          notifications: [action.data, ...state.notifications], // Add new notification to the list\r\n          creating: false,\r\n          error: false,\r\n        };\r\n      case \"CREATE_NOTIFICATION_FAIL\":\r\n        return { ...state, creating: false, error: true };\r\n  \r\n      // Actions for retrieving notifications\r\n      case \"GET_NOTIFICATIONS_START\":\r\n        return { ...state, loading: true, error: false };\r\n      case \"GET_NOTIFICATIONS_SUCCESS\":\r\n        return {\r\n          ...state,\r\n          notifications: action.data || [], // Ensure notifications defaults to an empty array if action.data is undefined\r\n          loading: false,\r\n          error: false,\r\n        };\r\n      case \"GET_NOTIFICATIONS_FAIL\":\r\n        return { ...state, loading: false, error: true };\r\n  \r\n      // Actions for marking a notification as read\r\n      case \"MARK_NOTIFICATION_AS_READ\":\r\n        return {\r\n          ...state,\r\n          notifications: state.notifications.map((notification) =>\r\n            notification._id === action.id\r\n              ? { ...notification, read: true } // Mark notification as read\r\n              : notification\r\n          ),\r\n        };\r\n  \r\n      // Actions for deleting a notification\r\n      case \"DELETE_NOTIFICATION\":\r\n        return {\r\n          ...state,\r\n          notifications: state.notifications.filter(\r\n            (notification) => notification._id !== action.id // Remove notification by id\r\n          ),\r\n        };\r\n  \r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n  \r\n  export default notificationReducer;\r\n  "],"mappings":"AAAA,MAAMA,YAAY,GAAG;EACjBC,aAAa,EAAE,EAAE;EAAE;EACnBC,OAAO,EAAE,KAAK;EAAE;EAChBC,KAAK,EAAE,KAAK;EAAE;EACdC,QAAQ,EAAE,KAAK;EAAE;EACjBC,IAAI,EAAC;AACP,CAAC;AAGD,MAAMC,mBAAmB,GAAGA,CAACC,KAAK,GAAGP,YAAY,EAAEQ,MAAM,KAAK;EAC5D,QAAQA,MAAM,CAACC,IAAI;IACjB;IACA,KAAK,2BAA2B;MAC9B,OAAO;QAAE,GAAGF,KAAK;QAAEH,QAAQ,EAAE,IAAI;QAAED,KAAK,EAAE;MAAM,CAAC;IACnD,KAAK,6BAA6B;MAChC,OAAO;QACL,GAAGI,KAAK;QACRN,aAAa,EAAE,CAACO,MAAM,CAACE,IAAI,EAAE,GAAGH,KAAK,CAACN,aAAa,CAAC;QAAE;QACtDG,QAAQ,EAAE,KAAK;QACfD,KAAK,EAAE;MACT,CAAC;IACH,KAAK,0BAA0B;MAC7B,OAAO;QAAE,GAAGI,KAAK;QAAEH,QAAQ,EAAE,KAAK;QAAED,KAAK,EAAE;MAAK,CAAC;;IAEnD;IACA,KAAK,yBAAyB;MAC5B,OAAO;QAAE,GAAGI,KAAK;QAAEL,OAAO,EAAE,IAAI;QAAEC,KAAK,EAAE;MAAM,CAAC;IAClD,KAAK,2BAA2B;MAC9B,OAAO;QACL,GAAGI,KAAK;QACRN,aAAa,EAAEO,MAAM,CAACE,IAAI,IAAI,EAAE;QAAE;QAClCR,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;MACT,CAAC;IACH,KAAK,wBAAwB;MAC3B,OAAO;QAAE,GAAGI,KAAK;QAAEL,OAAO,EAAE,KAAK;QAAEC,KAAK,EAAE;MAAK,CAAC;;IAElD;IACA,KAAK,2BAA2B;MAC9B,OAAO;QACL,GAAGI,KAAK;QACRN,aAAa,EAAEM,KAAK,CAACN,aAAa,CAACU,GAAG,CAAEC,YAAY,IAClDA,YAAY,CAACC,GAAG,KAAKL,MAAM,CAACM,EAAE,GAC1B;UAAE,GAAGF,YAAY;UAAEG,IAAI,EAAE;QAAK,CAAC,CAAC;QAAA,EAChCH,YACN;MACF,CAAC;;IAEH;IACA,KAAK,qBAAqB;MACxB,OAAO;QACL,GAAGL,KAAK;QACRN,aAAa,EAAEM,KAAK,CAACN,aAAa,CAACe,MAAM,CACtCJ,YAAY,IAAKA,YAAY,CAACC,GAAG,KAAKL,MAAM,CAACM,EAAE,CAAC;QACnD;MACF,CAAC;IAEH;MACE,OAAOP,KAAK;EAChB;AACF,CAAC;AAED,eAAeD,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}