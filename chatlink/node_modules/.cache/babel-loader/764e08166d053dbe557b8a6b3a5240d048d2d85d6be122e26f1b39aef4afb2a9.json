{"ast":null,"code":"import axios from \"axios\";\n\n// Create an axios instance with a base URL\nconst API = axios.create({\n  baseURL: \"http://localhost:5000\"\n});\n\n// Optional: Set authorization token if the user is authenticated\nconst setAuthToken = token => {\n  if (token) {\n    API.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n  } else {\n    delete API.defaults.headers.common[\"Authorization\"];\n  }\n};\n\n// Get all notifications for a user\nexport const getNotifications = userId => API.get(`/notifications/${userId}`);\n\n// Create a new notification\nexport const createNotification = (userId, message, type) => API.post(`/notifications`, {\n  userId,\n  message,\n  type\n});\n\n// Mark notification as read\nexport const markNotificationAsRead = notificationId => API.patch(`/notifications/${notificationId}/read`);\n\n// Delete a notification\nexport const deleteNotification = notificationId => API.delete(`/notifications/${notificationId}`);\n\n// Get unread notifications count for a user\nexport const getUnreadNotificationCount = userId => API.get(`/notifications/${userId}/unread-count`);\n\n// Update an existing notification\nexport const updateNotification = (notificationId, updatedMessage) => API.put(`/notifications/${notificationId}`, {\n  message: updatedMessage\n});\n\n// Optionally, you can set the auth token dynamically (e.g., from localStorage)\nconst token = localStorage.getItem(\"token\"); // Assuming the token is stored in localStorage\nsetAuthToken(token);\n\n// You can also set up interceptors to handle global errors, like unauthorized access\nAPI.interceptors.response.use(response => response,\n// Pass through the response if it's successful\nerror => {\n  if (error.response && error.response.status === 401) {\n    // Handle unauthorized access, e.g., redirect to login page\n    console.error(\"Unauthorized access. Please log in again.\");\n    // Redirect to login page or show a message\n  }\n  return Promise.reject(error); // Reject the promise with the error\n});\nexport default API;","map":{"version":3,"names":["axios","API","create","baseURL","setAuthToken","token","defaults","headers","common","getNotifications","userId","get","createNotification","message","type","post","markNotificationAsRead","notificationId","patch","deleteNotification","delete","getUnreadNotificationCount","updateNotification","updatedMessage","put","localStorage","getItem","interceptors","response","use","error","status","console","Promise","reject"],"sources":["E:/React/Intern Project/chatlink/src/components/api/NotificationRequest.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\n// Create an axios instance with a base URL\r\nconst API = axios.create({ baseURL: \"http://localhost:5000\" });\r\n\r\n// Optional: Set authorization token if the user is authenticated\r\nconst setAuthToken = (token) => {\r\n  if (token) {\r\n    API.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\r\n  } else {\r\n    delete API.defaults.headers.common[\"Authorization\"];\r\n  }\r\n};\r\n\r\n// Get all notifications for a user\r\nexport const getNotifications = (userId) => API.get(`/notifications/${userId}`);\r\n\r\n// Create a new notification\r\nexport const createNotification = (userId, message, type) =>\r\n  API.post(`/notifications`, { userId, message, type });\r\n\r\n// Mark notification as read\r\nexport const markNotificationAsRead = (notificationId) =>\r\n  API.patch(`/notifications/${notificationId}/read`);\r\n\r\n// Delete a notification\r\nexport const deleteNotification = (notificationId) =>\r\n  API.delete(`/notifications/${notificationId}`);\r\n\r\n// Get unread notifications count for a user\r\nexport const getUnreadNotificationCount = (userId) =>\r\n  API.get(`/notifications/${userId}/unread-count`);\r\n\r\n// Update an existing notification\r\nexport const updateNotification = (notificationId, updatedMessage) =>\r\n  API.put(`/notifications/${notificationId}`, { message: updatedMessage });\r\n\r\n// Optionally, you can set the auth token dynamically (e.g., from localStorage)\r\nconst token = localStorage.getItem(\"token\"); // Assuming the token is stored in localStorage\r\nsetAuthToken(token);\r\n\r\n// You can also set up interceptors to handle global errors, like unauthorized access\r\nAPI.interceptors.response.use(\r\n  (response) => response, // Pass through the response if it's successful\r\n  (error) => {\r\n    if (error.response && error.response.status === 401) {\r\n      // Handle unauthorized access, e.g., redirect to login page\r\n      console.error(\"Unauthorized access. Please log in again.\");\r\n      // Redirect to login page or show a message\r\n    }\r\n    return Promise.reject(error); // Reject the promise with the error\r\n  }\r\n);\r\n\r\nexport default API;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EAAEC,OAAO,EAAE;AAAwB,CAAC,CAAC;;AAE9D;AACA,MAAMC,YAAY,GAAIC,KAAK,IAAK;EAC9B,IAAIA,KAAK,EAAE;IACTJ,GAAG,CAACK,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,GAAG,UAAUH,KAAK,EAAE;EAClE,CAAC,MAAM;IACL,OAAOJ,GAAG,CAACK,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC;EACrD;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,gBAAgB,GAAIC,MAAM,IAAKT,GAAG,CAACU,GAAG,CAAC,kBAAkBD,MAAM,EAAE,CAAC;;AAE/E;AACA,OAAO,MAAME,kBAAkB,GAAGA,CAACF,MAAM,EAAEG,OAAO,EAAEC,IAAI,KACtDb,GAAG,CAACc,IAAI,CAAC,gBAAgB,EAAE;EAAEL,MAAM;EAAEG,OAAO;EAAEC;AAAK,CAAC,CAAC;;AAEvD;AACA,OAAO,MAAME,sBAAsB,GAAIC,cAAc,IACnDhB,GAAG,CAACiB,KAAK,CAAC,kBAAkBD,cAAc,OAAO,CAAC;;AAEpD;AACA,OAAO,MAAME,kBAAkB,GAAIF,cAAc,IAC/ChB,GAAG,CAACmB,MAAM,CAAC,kBAAkBH,cAAc,EAAE,CAAC;;AAEhD;AACA,OAAO,MAAMI,0BAA0B,GAAIX,MAAM,IAC/CT,GAAG,CAACU,GAAG,CAAC,kBAAkBD,MAAM,eAAe,CAAC;;AAElD;AACA,OAAO,MAAMY,kBAAkB,GAAGA,CAACL,cAAc,EAAEM,cAAc,KAC/DtB,GAAG,CAACuB,GAAG,CAAC,kBAAkBP,cAAc,EAAE,EAAE;EAAEJ,OAAO,EAAEU;AAAe,CAAC,CAAC;;AAE1E;AACA,MAAMlB,KAAK,GAAGoB,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;AAC7CtB,YAAY,CAACC,KAAK,CAAC;;AAEnB;AACAJ,GAAG,CAAC0B,YAAY,CAACC,QAAQ,CAACC,GAAG,CAC1BD,QAAQ,IAAKA,QAAQ;AAAE;AACvBE,KAAK,IAAK;EACT,IAAIA,KAAK,CAACF,QAAQ,IAAIE,KAAK,CAACF,QAAQ,CAACG,MAAM,KAAK,GAAG,EAAE;IACnD;IACAC,OAAO,CAACF,KAAK,CAAC,2CAA2C,CAAC;IAC1D;EACF;EACA,OAAOG,OAAO,CAACC,MAAM,CAACJ,KAAK,CAAC,CAAC,CAAC;AAChC,CACF,CAAC;AAED,eAAe7B,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}